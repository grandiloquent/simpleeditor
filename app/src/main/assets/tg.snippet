
const scene = new THREE.Scene();

const container = document.getElementById('container');
let width = container.offsetWidth;
let height = container.offsetHeight;

const renderer = new THREE.WebGLRenderer();
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(width, height);
renderer.setClearColor(0xeeeeee, 1);
renderer.physicallyCorrectLigths = true;
renderer.outputWEncoding = THREE.sRGBEncoding;

container.appendChild(renderer.domElement);

const camera = new THREE.PerspectiveCamera(
    70,
    window.innerWidth / window.innerHeight,
    0.001,
    1000
);
camera.position.set(0, 0, 2);
const controls = new OrbitControls(camera, renderer.domElement);
let material;
let geometry;
let sphere;
let time;

async function init() {
    await addObjects();
    render();
    resize();
    window.addEventListener('resize', resize)
}
async function addObjects() {
    material = new THREE.ShaderMaterial({
        extensions: {
            derivatives: "#extension GL_OES_standard_derivatives : enable"
        },
        side: THREE.DoubleSide,
        uniforms: {
            time: { value: 0 },
            resolution: { value: new THREE.Vector4() },
        },
        vertexShader: await (await fetch('/file?id=')).text(),
        fragmentShader: await (await fetch('/file?id=')).text()
    });

    geometry = new THREE.SphereGeometry(1, 30, 30);
    sphere = new THREE.Mesh(geometry, material);
    scene.add(sphere);
}
function render() {
    time += 0.05;
    material.uniforms.time.value = time;
    requestAnimationFrame(render);
    renderer.render(scene, camera);
}
function resize() {
    width = container.offsetWidth;
    height = container.offsetHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height
    camera.updateProjectionMatrix()
}
init();