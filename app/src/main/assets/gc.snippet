// https://www.shadertoy.com/view/lfsBzr

let gl, program, buffer, vpos, x, y;
let iTime, id;

function draw() {
  gl.bindTexture(gl.TEXTURE_CUBE_MAP, id);

  const time = window.performance.now();
  gl.uniform1f(iTime, time / 1000);
  gl.drawArrays(gl.TRIANGLES, 0, 3);
}

function animate() {
  draw();
  requestAnimationFrame(animate);
}
async function init() {
  const canvas = document.getElementById("canvas");
  x = canvas.offsetWidth;
  y = canvas.offsetHeight;
  canvas.width = x;
  canvas.height = y;
  gl = canvas.getContext("webgl2", {
    alpha: false,
    depth: false,
    stencil: false,
    premultipliedAlpha: false,
    antialias: false,
    preserveDrawingBuffer: true,
    powerPreference: "high-performance"
  });



  const vs = gl.createShader(gl.VERTEX_SHADER);
  const fs = gl.createShader(gl.FRAGMENT_SHADER);
  const vsSource = document.getElementById('vs').innerHTML.trim();
  const fsSource = `${ document.getElementById('fs').innerHTML.trim().replace(
            "uniform float     iFrameRate;",`uniform float iFrameRate;
            uniform samplerCube iChannel0;`)}
    ${ await(await fetch('/file?id=33')).text() }`;
  gl.shaderSource(vs, vsSource);
  gl.shaderSource(fs, fsSource);
  gl.compileShader(vs);
  gl.compileShader(fs);

  program = gl.createProgram();


  gl.attachShader(program, vs);
  gl.attachShader(program, fs);

  gl.linkProgram(program);

  gl.useProgram(program);

  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    const info = gl.getProgramInfoLog(program);
    throw `Could not compile WebGL program.${ info }`;
  }
  buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  let vertices = new Float32Array([-1.0, -1.0, 3.0, -1.0, -1.0, 3.0])
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  vpos = gl.getAttribLocation(program, "pos");

  gl.viewport(0, 0, x, y);

  iTime = gl.getUniformLocation(program, "iTime");
  gl.uniform3f(gl.getUniformLocation(program, "iResolution"), x, y, 1.0);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.vertexAttribPointer(vpos, 2, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(vpos);
  // gl.disableVertexAttribArray(vpos);
  // gl.bindBuffer(gl.ARRAY_BUFFER, null);

  id = await loadCubeMap("/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png");
  gl.uniform1i(gl.getUniformLocation(program, "iChannel0"), 0);

  animate();
}

init();

async function loadCubeMap(uri) {
  const images = [new Image(), new Image(), new Image(), new Image(), new Image(), new Image];
  const tasks = [];
  for (let i = 0; i < images.length; i++) {
    tasks.push(new Promise((resolve, reject) => {
      const index = uri.lastIndexOf('.');
      images[i].src = i === 0 ? uri : `${uri.substring(0, index)}_${i}.${uri.substring(index + 1)}`;
      images[i].onload = () => {
        resolve();
      }
      images[i].onerror = () => {
        reject();
      }
    }));
  }
  await Promise.all(tasks);
  const id = gl.createTexture();

  const flipY = false;
  gl.bindTexture(gl.TEXTURE_CUBE_MAP, id);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
  gl.activeTexture(gl.TEXTURE0);
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    images[0]);
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    images[1]);
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    (flipY ? images[3] : images[2]));
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    (flipY ? images[2] : images[3]));
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    images[4]);
  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE,
    images[5]);

  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);

  return id;
}